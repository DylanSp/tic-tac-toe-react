{"version":3,"sources":["Cell.tsx","Grid.tsx","Gameboard.tsx","NewGameButton.tsx","StatusBar.tsx","TicTacToeGame.ts","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["Cell","_React$PureComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","canvasRef","componentDidUpdate","drawCellState","componentWillUpdate","React","inherits","createClass","key","value","_this2","react","ref","height","width","className","onClick","handleMove","cellNum","canvas","current","rough","rc","cellState","line","circle","context","getContext","clearRect","Grid","componentDidMount","id","Gameboard","boardState","map","index","Cell_Cell","Grid_Grid","NewGameButton","type","startNewGame","StatusBar","apply","arguments","text","isGameOver","winningPlayer","Error","currentPlayer","TicTacToeGame","_currentPlayer","_winningPlayer","_board","Array","fill","undefined","updatedGame","element","checkForEnd","_i","_lines","length","every","cell","get","App","_this$state$game$make","state","game","makeMove","_this$state$game$make2","slicedToArray","result","toast","error","hideProgressBar","info","success","concat","setState","lib","StatusBar_StatusBar","Gameboard_Gameboard","board","NewGameButton_NewGameButton","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","src_App_0","document","getElementById","URL","process","toString","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.824a3acf.chunk.js","sourcesContent":["import * as React from \"react\";\nimport rough from \"roughjs\";\nimport \"./Cell.css\";\nimport { CellNumber, CellState } from \"./TicTacToeGame\";\n\ninterface CellProps {\n    cellNum: CellNumber;\n    cellState: CellState;\n    handleMove: (cellNum: CellNumber) => void;\n}\n\nexport class Cell extends React.PureComponent<CellProps> {\n    private canvasRef: React.RefObject<HTMLCanvasElement>;\n\n    constructor(props: CellProps) {\n        super(props);\n        this.canvasRef = React.createRef();\n    }\n\n    public componentDidUpdate = () => {\n        this.drawCellState();\n    }\n\n    public componentWillUpdate = () => {\n        this.drawCellState();\n    }\n\n    public render() {\n        return (\n            <canvas\n                ref={this.canvasRef}\n                height=\"100\"\n                width=\"100\"\n                className=\"cell\"\n                onClick={() => this.props.handleMove(this.props.cellNum)}\n            />\n        );\n    }\n\n    private drawCellState(): void {\n        const canvas = this.canvasRef.current;\n        if (canvas && rough) {\n            const rc = rough.canvas(canvas);\n            if (this.props.cellState === \"X\") {\n                rc.line(20, 20, 80, 80); // top-left to bottom-right\n                rc.line(20, 80, 80, 20); // top-right to bottom-left\n            } else if (this.props.cellState === \"O\") {\n                rc.circle(50, 50, 60);\n            } else {\n                // clear any drawings on the canvas\n                const context = canvas.getContext(\"2d\");\n                if (context) {\n                    context.clearRect(0, 0, canvas.width, canvas.height);\n                }\n            }\n        }\n    }\n}\n","import * as React from \"react\";\nimport rough from \"roughjs\";\nimport \"./Grid.css\";\n\nexport class Grid extends React.PureComponent<{}, {}> {\n    private canvasRef: React.RefObject<HTMLCanvasElement>;\n\n    constructor(props: {}) {\n        super(props);\n        this.canvasRef = React.createRef();\n    }\n\n    public componentDidMount = () => {\n        // TODO - error handling code for if ref doesn't work?\n        // second check is necessary for testing;\n        // the rough object doesn't exist when using JSDom, even with canvas installed\n        if (this.canvasRef.current && rough) {\n            const rc = rough.canvas(this.canvasRef.current);\n            rc.line(100, 0, 100, 300); // left vertical line\n            rc.line(200, 0, 200, 300); // right vertical line\n            rc.line(0, 100, 300, 100); // top horizontal line\n            rc.line(0, 200, 300, 200); // bottom horizontal line\n        }\n    }\n\n    public render() {\n        return (\n            <canvas id=\"gridCanvas\" ref={this.canvasRef} height=\"300\" width=\"300\" className=\"grid\" />\n        );\n    }\n}\n","import { SFC } from \"react\";\nimport * as React from \"react\";\nimport { Cell } from \"./Cell\";\nimport \"./Gameboard.css\";\nimport { Grid } from \"./Grid\";\nimport { CellNumber, CellState } from \"./TicTacToeGame\";\n\ninterface GameboardProps {\n    boardState: ReadonlyArray<CellState>;\n    handleMove: (cellNum: CellNumber) => void;\n}\n\nexport const Gameboard: SFC<GameboardProps> = (props) => (\n    <div className=\"boardWrapper\">\n        {props.boardState\n            .map((cellState, index) =>\n                <Cell\n                    key={index}\n                    cellNum={index as CellNumber}\n                    cellState={cellState}\n                    handleMove={props.handleMove}\n                />)}\n        <Grid />\n    </div>\n);\n","import { SFC } from \"react\";\nimport * as React from \"react\";\nimport \"./NewGameButton.css\";\n\ninterface NewGameButtonProps {\n    startNewGame: () => void;\n}\n\n// button element has an ID so tests can find it\nexport const NewGameButton: SFC<NewGameButtonProps> = (props) => (\n    <div className=\"newGameButtonContainer\">\n        <button id=\"newGameButton\" className=\"newGameButton\" type=\"button\" onClick={props.startNewGame}>\n            Start New Game\n        </button>\n    </div>\n);\n","import * as React from \"react\";\nimport \"./StatusBar.css\";\nimport { Player, WinningPlayer } from \"./TicTacToeGame\";\n\ninterface StatusBarProps {\n    isGameOver: boolean;\n    currentPlayer: Player;\n    winningPlayer: WinningPlayer;\n}\n\nexport class StatusBar extends React.PureComponent<StatusBarProps> {\n    public render() {\n        let text: string;\n\n        if (this.props.isGameOver) {\n            if (this.props.winningPlayer === \"PlayerX\") {\n                text = \"Player X has won!\";\n            } else if (this.props.winningPlayer === \"PlayerO\") {\n                text = \"Player O has won!\";\n            } else if (this.props.winningPlayer === \"DrawnGame\") {\n                text = \"Game is drawn!\";\n            } else {\n                throw new Error(\"Game logic error; game is won with unspecified victor\");\n            }\n        } else {\n            if (this.props.currentPlayer === \"PlayerX\") {\n                text = \"Player X to move\";\n            } else {\n                text = \"Player O to move\";\n            }\n        }\n\n        return (\n            <div className=\"statusBarContainer\">\n                {text}\n            </div>\n        );\n    }\n}\n","export type Player = \"PlayerX\" | \"PlayerO\";\nexport type MoveResult = \"GameFinished\" | \"WaitingForMove\" | \"SquareFilled\" | \"GameAlreadyOver\";\nexport type CellNumber = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\nexport type CellState = \"X\" | \"O\" | \"EMPTY\";\nexport type WinningPlayer = Player | \"DrawnGame\" | undefined;\n\nexport class TicTacToeGame {\n    private _currentPlayer: Player;\n    private _winningPlayer: WinningPlayer;\n    private _board: CellState[];\n\n    constructor() {\n        this._board = new Array<CellState>(9).fill(\"EMPTY\");\n        this._currentPlayer = \"PlayerX\";\n        this._winningPlayer = undefined;\n    }\n\n    public get currentPlayer(): Player {\n        return this._currentPlayer;\n    }\n\n    public get winningPlayer(): WinningPlayer {\n        return this._winningPlayer;\n    }\n\n    public get board(): ReadonlyArray<CellState> {\n        return this._board;\n    }\n\n    public makeMove(cellNum: CellNumber): [MoveResult, TicTacToeGame] {\n        const updatedGame = new TicTacToeGame();\n        updatedGame._currentPlayer = this.currentPlayer;\n        updatedGame._winningPlayer = this.winningPlayer;\n        updatedGame._board = this._board.map((element) => element);\n\n        if (updatedGame._board[cellNum] !== \"EMPTY\") {\n            return [\"SquareFilled\", updatedGame];\n        }\n\n        if (updatedGame.winningPlayer) {\n            return [\"GameAlreadyOver\", updatedGame];\n        }\n\n        if (updatedGame.currentPlayer === \"PlayerX\") {\n            updatedGame._board[cellNum] = \"X\";\n        } else {\n            updatedGame._board[cellNum] = \"O\";\n        }\n\n        updatedGame.checkForEnd();\n        if (updatedGame.winningPlayer) {\n            return [\"GameFinished\", updatedGame];\n        }\n\n        if (updatedGame.currentPlayer === \"PlayerX\") {\n            updatedGame._currentPlayer = \"PlayerO\";\n        } else {\n            updatedGame._currentPlayer = \"PlayerX\";\n        }\n        return [\"WaitingForMove\", updatedGame];\n    }\n\n    private checkForEnd(): void {\n        const lines = [\n            [this._board[0], this._board[1], this._board[2]],\n            [this._board[3], this._board[4], this._board[5]],\n            [this._board[6], this._board[7], this._board[8]],\n\n            [this._board[0], this._board[3], this._board[6]],\n            [this._board[1], this._board[4], this._board[7]],\n            [this._board[2], this._board[5], this._board[8]],\n\n            [this._board[0], this._board[4], this._board[8]],\n            [this._board[2], this._board[4], this._board[6]],\n        ];\n\n        for (const line of lines) {\n            if (line.every((cell) => cell === \"X\")) {\n                this._winningPlayer = \"PlayerX\";\n                return;\n            } else if (line.every((cell) => cell === \"O\")) {\n                this._winningPlayer = \"PlayerO\";\n                return;\n            }\n        }\n\n        // check for draw\n        if (this._board.every((cell) => cell !== \"EMPTY\")) {\n            this._winningPlayer = \"DrawnGame\";\n            return;\n        }\n\n        this._winningPlayer = undefined; // no winning player detected\n        return;\n    }\n}\n","import * as React from \"react\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\nimport { Gameboard } from \"./Gameboard\";\nimport { NewGameButton } from \"./NewGameButton\";\nimport { StatusBar } from \"./StatusBar\";\nimport { CellNumber, TicTacToeGame } from \"./TicTacToeGame\";\n\nexport type AppProps = any;\n\nexport interface AppState {\n    game: TicTacToeGame;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n        this.state = {game: new TicTacToeGame()};\n    }\n\n    public render() {\n        return (\n            <div>\n                <ToastContainer />\n                <div className=\"visibleElementsContainer\">\n                    <StatusBar\n                        isGameOver={!!this.state.game.winningPlayer}\n                        currentPlayer={this.state.game.currentPlayer}\n                        winningPlayer={this.state.game.winningPlayer}\n                    />\n                    <Gameboard\n                        boardState={this.state.game.board}\n                        handleMove={this.handleMove}\n                    />\n                    <NewGameButton startNewGame={() => this.setState({game: new TicTacToeGame()})} />\n                </div>\n            </div>\n        );\n    }\n\n    // Needs to be a lambda in order to avoid bug with \"this\"\n    public handleMove = (cellNum: CellNumber): void => {\n        const [result, updatedGame] = this.state.game.makeMove(cellNum);\n        switch (result) {\n            case \"GameAlreadyOver\":\n                toast.error(\"Game is already over!\", {\n                    hideProgressBar: true,\n                });\n                break;\n            case \"SquareFilled\":\n                toast.error(\"Square is already filled!\", {\n                   hideProgressBar: true,\n                });\n                break;\n            case \"GameFinished\":\n                if (updatedGame.winningPlayer === \"DrawnGame\") {\n                    toast.info(\"Game drawn!\", {\n                        hideProgressBar: true,\n                    });\n                } else {\n                    toast.success(`${updatedGame.winningPlayer} has won! Congratulations!`, {\n                        hideProgressBar: true,\n                    });\n                }\n                this.setState({game: updatedGame});\n                break;\n            case \"WaitingForMove\":\n                this.setState({game: updatedGame});\n                break;\n        }\n    }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString(),\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\",\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log(\"New content is available; please refresh.\");\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"typeface-amatic-sc\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(\n    <App />,\n    document.getElementById(\"root\") as HTMLElement,\n);\nregisterServiceWorker();\n"],"sourceRoot":""}